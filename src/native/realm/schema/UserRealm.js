import {appSchema, tableSchema} from '@nozbe/watermelondb';
import * as Constants from '../dbconstants';

export default appSchema({
  version: 1,
  tables: [
    // tableSchema({
    //   name: Constants.Boards,
    //   columns: [
    //     {name: 'id', type: 'number', isIndexed: true},
    //     {name: 'moreAvailable', type: 'boolean'},
    //     {name: 'threads', type: 'string'},
    //   ],
    // }),
    tableSchema({
      name: Constants.ReplyTos,
      columns: [
        {name: 'messageId', type: 'string'},
        {name: 'boardId', type: 'string'},
        {name: 'message', type: 'string'},
        {name: 'threadId', type: 'string'},
        {name: 'type', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.Messages,
      columns: [
        {name: 'encrypted', type: 'boolean'},
        {name: 'clientId', type: 'string', isIndexed: true},
        {name: 'messageId', type: 'string', isIndexed: true},
        {name: 'from_id', type: 'string'},
        {name: 'author_id', type: 'string'},
        {name: 'board_id', type: 'string'},
        {name: 'highImportance', type: 'boolean'},
        {name: 'name', type: 'string'},
        {name: 'desc', type: 'string'},
        {name: 'logo', type: 'string'},
        {name: 'boardId', type: 'string'},
        {name: 'boardClientId', type: 'string'},
        {name: 'views', type: 'number'},
        {name: 'sentOn', type: 'number'},
        {name: 'sortTime', type: 'number'},
        {name: 'deliveredOn', type: 'number', isOptional: true},
        {name: 'isSender', type: 'boolean'},
        {name: 'secureEmail', type: 'boolean'},
        {name: 'forward', type: 'boolean'},
        {name: 'memo', type: 'boolean'},
        {name: 'deepRecalled', type: 'boolean'},
        {name: 'state', type: 'string'},
        {name: 'messages', type: 'string'},
        {name: 'unread', type: 'boolean'},
        {name: 'groupMessage', type: 'boolean'},
        {name: 'componentsCount', type: 'string'},
        {name: 'namespaceId', type: 'string'},
        {name: 'isPolicySet', type: 'boolean'},
        {name: 'retentionState', type: 'string'},
        {name: 'messageState', type: 'number'},
        {name: 'remind', type: 'string'},
        {name: 'replyTo', type: 'string'},
        {name: 'sad', type: 'string'},
        {name: 'shock', type: 'string'},
        {name: 'like', type: 'string'},
        {name: 'laugh', type: 'string'},
        {name: 'anger', type: 'string'},
        {name: 'unlike', type: 'string'},
        {name: 'likeCount', type: 'number'},
        {name: 'unlikeCount', type: 'number'},
        {name: 'sadCount', type: 'number'},
        {name: 'laughCount', type: 'number'},
        {name: 'angerCount', type: 'number'},
        {name: 'shockCount', type: 'number'},
        {name: 'msgNo', type: 'number'},
        {name: 'isEdited', type: 'boolean'},
        {name: 'linkPreviews', type: 'string'},
        {name: 'mentions', type: 'string'},
        {name: 'everyoneMentioned', type: 'boolean', isOptional: false},
        {name: 'updated_at', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.Reminders,
      columns: [
        {name: 'userId', type: 'string'},
        {name: 'remindAt', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.Payloads,
      columns: [{name: 'url', type: 'string'}],
    }),
    tableSchema({
      name: Constants.Reactions,
      columns: [
        {name: 'rAt', type: 'number'},
        {name: 'userId', type: 'string'},
        {name: '_id', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.LinkPreviews,
      columns: [
        {name: 'title', type: 'string'},
        {name: 'description', type: 'string'},
        {name: 'source', type: 'string'},
        {name: 'url', type: 'string'},
        {name: 'type', type: 'string'},
        {name: 'site', type: 'string'},
        {name: 'image', type: 'string'},
        {name: 'video', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.Videos,
      columns: [
        {name: 'url', type: 'string'},
        {name: 'secureUrl', type: 'string'},
        {name: 'type', type: 'string'},
        {name: 'width', type: 'string'},
        {name: 'height', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.Contacts,
      columns: [
        {name: 'accountId', type: 'string'},
        {name: 'fN', type: 'string'},
        {name: 'lN', type: 'string'},
        {name: 'emailId', type: 'string'},
        {name: 'phoneNo', type: 'string'},
        {name: 'color', type: 'string'},
        {name: 'icon', type: 'string'},
        {name: 'orgId', type: 'string'},
        {name: 'updated_at', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.Components,
      columns: [
        {name: 'componentId', type: 'string'},
        {name: 'componentType', type: 'string'},
        {name: 'componentBody', type: 'string'},
        {name: 'componentThumbnails', type: 'string'},
        {name: 'componentData', type: 'string'},
        {name: 'componentSize', type: 'string'},
        {name: 'componentLength', type: 'string'},
        {name: 'thumbnailURL', type: 'string'},
        {name: 'componentFileId', type: 'string'},
        {name: 'localFilePath', type: 'string'},
        {name: 'message_id', type: 'string'},
        {name: 'post_id', type: 'string'},
        {name: 'fileMeta_id', type: 'string'},
        {name: 'uploadItem_id', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.ComponentThumbnails,
      columns: [
        {name: 'url', type: 'string'},
        {name: 'localFilePath', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.ComponentDatas,
      columns: [
        {name: 'eventType', type: 'string'},
        {name: 'filename', type: 'string'},
        // {name: 'eventInitiator', type: 'EventInitiator'},
        // {name: 'resources', type: 'EventInitiator'},
      ],
    }),
    tableSchema({
      name: Constants.EventInitiators,
      columns: [
        {name: 'userId', type: 'string'},
        {name: 'firstName', type: 'string'},
        {name: 'lastName', type: 'string'},
        {name: 'threadSubject', type: 'string'},
        {name: 'emailId', type: 'string'},
        {name: 'boardSubject', type: 'string'},
        {name: 'boardDesc', type: 'string'},
        {name: 'topicName', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.TemplateDatas,
      columns: [{name: 'variables', type: 'string'}],
    }),
    tableSchema({
      name: Constants.QueryItems,
      columns: [
        {name: 'moreAvailable', type: 'boolean'},
        {name: 'laMod', type: 'number'},
        {name: 'lastBoardSortTime', type: 'number'},
        {name: 'badge', type: 'string'},
        {name: 'icon', type: 'string'},
        {name: 'name', type: 'string'},
        {name: 'filter', type: 'string'},
        {name: 'index', type: 'number'},
        {name: 'active', type: 'boolean'},
        {name: 'updated_at', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.Settings,
      columns: [
        {name: 'threadOwner', type: 'string'},
        {name: 'topicName', type: 'string'},
        {name: 'messagesCount', type: 'number'},
        {name: 'lockParticipants', type: 'boolean'},
        {name: 'lockTopicName', type: 'boolean'},
        // {name: 'notifications', type: 'Notifications'},
        {name: 'threadEmailId', type: 'string'},
        {name: 'createdOn', type: 'string'},
        {name: 'type', type: 'number'},
        {name: 'secureEmail', type: 'boolean'},
        {name: 'groupChat', type: 'boolean'},
      ],
    }),
    tableSchema({
      name: Constants.Notifications,
      columns: [{name: 'mute', type: 'string'}],
    }),
    tableSchema({
      name: Constants.Actions,
      columns: [
        {name: 'on', type: 'boolean'},
        {name: 'till', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.Likes,
      columns: [
        {name: 'rAt', type: 'number'},
        {name: 'userId', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.Posts,
      columns: [
        {name: 'postId', type: 'string', isIndexed: true},
        {name: 'clientId', type: 'string', isIndexed: true},
        {name: 'messageState', type: 'number'},
        {name: 'postType', type: 'string'},
        {name: 'author_id', type: 'string'},
        {name: 'from_id', type: 'string'},
        {name: 'board_id', type: 'string'},
        {name: 'boardId', type: 'string'},
        {name: 'parentId', type: 'string'},
        {name: 'namespaceId', type: 'string'},
        {name: 'commentCount', type: 'number'},
        {name: 'like', type: 'string'},
        {name: 'sad', type: 'string'},
        {name: 'shock', type: 'string'},
        {name: 'laugh', type: 'string'},
        {name: 'anger', type: 'string'},
        {name: 'unlike', type: 'string'},
        {name: 'linkPreviews', type: 'string'},
        {name: 'read', type: 'boolean'},
        {name: 'isPostedAsTeam', type: 'boolean'},
        {name: 'isEdited', type: 'boolean'},
        {name: 'policy', type: 'string'},
        {name: 'location', type: 'string'},
        {name: 'lastModified', type: 'number'},
        {name: 'sortTime', type: 'number'},
        {name: 'lastModifiedBy', type: 'string'},
        {name: 'createdOn', type: 'number'},
        {name: 'deliveredOn', type: 'number', isOptional: true},
        {name: 'state', type: 'number'},
        {name: 'metaType', type: 'number'},
        {name: 'wsId', type: 'string'},
        {name: 'orgId', type: 'string'},
        {name: 'remind', type: 'string'},
        {name: 'actionCount', type: 'number'},
        {name: 'encrypted', type: 'boolean'},
        {name: 'hasHistory', type: 'boolean'},
        {name: 'disabledLike', type: 'boolean'},
        {name: 'disabledComment', type: 'boolean'},
        {name: 'disabledOptions', type: 'boolean'},
        {name: 'postNumber', type: 'number'},
        {name: 'retentionState', type: 'string'},
        {name: 'classification', type: 'string'},
        {name: 'likeCount', type: 'number'},
        {name: 'unlikeCount', type: 'number'},
        {name: 'sadCount', type: 'number'},
        {name: 'laughCount', type: 'number'},
        {name: 'angerCount', type: 'number'},
        {name: 'shockCount', type: 'number'},
        {name: 'isFollowing', type: 'boolean'},
        {name: 'readCount', type: 'number'},
        {name: 'moreAvailable', type: 'boolean'},
        {name: 'updated_at', type: 'number'},
        {name: 'mentions', type: 'string'},
        {name: 'everyoneMentioned', type: 'boolean', isOptional: false},
      ],
    }),

    tableSchema({
      name: Constants.Boards,
      columns: [
        {name: '_id', type: 'string', isIndexed: true},
        {name: 'clientId', type: 'string', isIndexed: true},
        {name: 'name', type: 'string'},
        {name: 'meta', type: 'string'},
        {name: 'desc', type: 'string'},
        {name: 'logo', type: 'string'},
        {name: 'isAllMembers', type: 'boolean'},
        {name: 'creator_id', type: 'string'},
        {name: 'owner_id', type: 'string'},
        {name: 'wsId', type: 'string'},
        {name: 'namespaceId', type: 'string'},
        {name: 'isActive', type: 'boolean'},
        {name: 'isMember', type: 'boolean'},
        {name: 'activity_id', type: 'string'},
        {name: 'membersCount', type: 'number'},
        {name: 'laMod', type: 'number'},
        {name: 'sortTime', type: 'number'},
        {name: 'memberLastModified', type: 'number'},
        {name: 'isEmailEnabled', type: 'boolean'},
        {name: 'emailId', type: 'string'},
        {name: 'friendlyAliasEmailId', type: 'string'},
        {name: 'lastModified', type: 'number'},
        {name: 'createdOn', type: 'number'},
        {name: 'lastModifiedBy', type: 'string'},
        {name: 'type', type: 'string'},
        {name: 'link', type: 'string'},
        {name: 'payload', type: 'string'},
        {name: 'allEmailIds', type: 'string'},
        {name: 'access', type: 'number', isOptional: true},
        {name: 'isTopicMember', type: 'boolean'},
        {name: 'notifications', type: 'string', isOptional: true},
        {name: 'unreadCount', type: 'number'},
        {name: 'lastReadId', type: 'string'},
        {name: 'firstUnreadTimestamp', type: 'string'},
        {name: 'hasDraftPost', type: 'boolean'},
        {name: 'isNew', type: 'boolean'},
        {name: 'wsMembersAccess', type: 'number', isOptional: true},
        {name: 'star', type: 'boolean'},
        {name: 'moreAvailable', type: 'boolean'},
        {name: 'workspace_id', type: 'string'},
        {name: 'boardState', type: 'number'},
        {name: 'updated_at', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.Activities,
      columns: [
        {name: 'board_id', type: 'string'},
        {name: 'message_id', type: 'string'},
        {name: 'post_id', type: 'string'},
        {name: 'updated_at', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.BoardMembers,
      columns: [
        {name: 'memberId', type: 'string', isIndexed: true},
        {name: 'contact_id', type: 'string'},
        {name: 'owner_board_id', type: 'string'},
        {name: 'creator_board_id', type: 'string'},
        {name: 'member_board_id', type: 'string'},
        {name: 'recent_member_board_id', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.Members,
      columns: [
        {name: 'memberId', type: 'string', isIndexed: true},
        {name: 'contact_id', type: 'string'},
        {name: 'member_message_id', type: 'string'},
        {name: 'author_message_id', type: 'string'},
        {name: 'from_message_id', type: 'string'},
        {name: 'author_post_id', type: 'string'},
        {name: 'from_post_id', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.Links,
      columns: [
        {name: 'linkId', type: 'string', isIndexed: true},
        {name: 'scope', type: 'string'},
        {name: 'access', type: 'number'},
        {name: 'shareUrl', type: 'string'},
      ],
    }),

    tableSchema({
      name: Constants.Workspaces,
      columns: [
        {name: 'wsId', type: 'string', isIndexed: true},
        {name: 'settings', type: 'string'},
        {name: 'type', type: 'string'},
        {name: 'category', type: 'string'},
        {name: 'requesttojoin', type: 'boolean'},
        {name: 'status', type: 'string'},
        {name: 'name', type: 'string'},
        {name: 'namelower', type: 'string'},
        {name: 'owner', type: 'string'},
        {name: 'createdBy', type: 'string'},
        {name: 'color', type: 'string'},
        {name: 'logo', type: 'string'},
        {name: 'orgId', type: 'string'},
        {name: 'createDate', type: 'number'},
        {name: 'modifiedDate', type: 'number'},
        {name: 'memberLastModified', type: 'number'},
        {name: 'modifiedBy', type: 'string'},
        {name: 'link', type: 'string'},
        {name: 'desc', type: 'string'},
        {name: 'geoFenceDetails', type: 'string'},
        {name: 'userStatus', type: 'string'},
        {name: 'membersCount', type: 'number'},
        {name: 'lMod', type: 'number'},
        {name: 'sortTime', type: 'number'},
        {name: 'hidden', type: 'boolean'},
        {name: 'isWSStarred', type: 'boolean'},
        {name: 'counter', type: 'string'},
        {name: 'moreAvailable', type: 'boolean'},
        {name: 'layout', type: 'string'},
        {name: 'portal', type: 'string'},
        {name: 'updated_at', type: 'number'},
        {name: 'isMember', type: 'boolean'},
      ],
    }),

    tableSchema({
      name: Constants.WSSettings,
      columns: [
        {name: 'wsId', type: 'string', isIndexed: true},
        // {name: 'whoCanInviteUsers', type: 'WSUserSettings'},
        // {name: 'whoCanCreateBoard', type: 'WSUserSettings'},
        // {
        //   name: 'whoCanAcceptRequests',
        //   type: 'WSUserSettings',
        //   isOptional: true,
        // },
        {name: 'allowExternalDomainUsers', type: 'boolean'},
        {name: 'allowExternalDomains', type: 'string'},
        {name: 'allowNonManagedDomainUsers', type: 'boolean'},
        {name: 'isDefaultAddMembers', type: 'boolean'},
        // {
        //   name: 'notificationSettings',
        //   type: 'WSNotificationSettings',
        //   isOptional: true,
        // },
      ],
    }),
    tableSchema({
      name: Constants.WSUserSettings,
      columns: [
        {name: 'all', type: 'boolean'},
        {name: 'roles', type: 'string'},
        {name: 'members', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.WSNotificationSettings,
      columns: [
        {name: 'enable', type: 'boolean'},
        // {
        //   name: 'teamChatSettings',
        //   type: 'WSTeamChatSettings',
        //   isOptional: true,
        // },
        {name: 'customSetting', type: 'string'},
        {name: 'forceApply', type: 'boolean'},
      ],
    }),
    tableSchema({
      name: Constants.WSTeamChatSettings,
      columns: [
        {name: 'directMessages', type: 'boolean'},
        {name: 'groupMessages', type: 'boolean'},
      ],
    }),
    tableSchema({
      name: Constants.WSCounters,
      columns: [
        {name: 'disb', type: 'number'},
        {name: 'docb', type: 'number'},
        {name: 'emwb', type: 'number'},
        {name: 'taskb', type: 'number'},
        {name: 'tabb', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.AppControlPermissions,
      columns: [
        {name: 'userId', type: 'string', isIndexed: true},
        {name: 'licenseId', type: 'string'},
        {name: 'role', type: 'string'},
        {name: 'managedBy', type: 'string'},
        {name: 'emailId', type: 'string'},
        {name: 'storage', type: 'string'},
        {name: 'applicationControl', type: 'string'},
      ],
    }),

    tableSchema({
      name: Constants.Profiles,
      columns: [
        {name: 'fN', type: 'string'},
        {name: 'lN', type: 'string'},
        {name: 'color', type: 'string'},
        {name: 'icon', type: 'string'},
        {name: 'dept', type: 'string'},
        {name: 'jTitle', type: 'string'},
        {name: 'empId', type: 'string'},
        {name: 'designation', type: 'string'},
        {name: 'phoneNo', type: 'string'},
        {name: 'manager', type: 'string'},
        {name: 'orgId', type: 'string'},
        {name: 'emailId', type: 'string'},
        {name: 'isOnboarded', type: 'boolean'},
        {name: 'workTimeZone', type: 'string'},
        {name: 'workTimeZoneCity', type: 'string'},
        {name: 'workTimeZoneOffset', type: 'string'},
        {name: 'weatherUnit', type: 'number'},
        {name: 'kaIdentity', type: 'string'},
        {name: 'onboarding', type: 'string'},
        {name: 'nPrefs', type: 'string'},
        {name: 'speakerIcon', type: 'boolean'},
        {name: 'usageLimits', type: 'string'},
        {name: 'updated_at', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.NPrefs,
      columns: [
        {name: 'sound', type: 'string'},
        {name: 'dndTill', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.Onboardings,
      columns: [
        {name: 'android', type: 'number'},
        {name: 'ios', type: 'number'},
        {name: 'knwPortal', type: 'number'},
        {name: 'plugin', type: 'number'},
        {name: 'skillStore', type: 'number'},
        {name: 'sta', type: 'number'},
        {name: 'web', type: 'number'},
        {name: 'nEmails', type: 'number'},
      ],
    }),
    tableSchema({
      name: Constants.WorkHours,
      columns: [
        {name: 'a', type: 'boolean'},
        {name: 's', type: 'number'},
        {name: 'e', type: 'number'},
        {name: 'ua', type: 'boolean'},
        {name: 'start', type: 'string'},
        {name: 'end', type: 'string'},
        {name: 'profile_id', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.Logos,
      columns: [
        {name: 'type', type: 'string'},
        // {name: 'val', type: 'Emoji'},
      ],
    }),
    tableSchema({
      name: Constants.Emojis,
      columns: [
        {name: 'category', type: 'string'},
        {name: 'unicode', type: 'string'},
        // {name: 'thumbnails', type: 'Sizes'},
      ],
    }),
    tableSchema({
      name: Constants.Sizes,
      columns: [
        {name: 'size', type: 'string'},
        {name: 'url', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.FileMetas,
      columns: [
        {name: 'rId', type: 'string', isIndexed: true},
        {name: 'downloadStatus', type: 'number'},
        {name: 'duration', type: 'number'},
        {name: 'encryptionStatus', type: 'boolean'},
        {name: 'fileExtension', type: 'string'},
        {name: 'fileId', type: 'string'},
        {name: 'fileName', type: 'string'},
        {name: 'fileExtn', type: 'string'},
        {name: 'fileSize', type: 'number'},
        {name: 'fileType', type: 'string'},
        {name: 'fileCopyUri', type: 'string'},
        {name: 'filePath', type: 'string'},
        {name: 'uri', type: 'string'},
        {name: 'hash', type: 'string'},
        {name: 'thumbnailURL', type: 'string'},
        {name: 'component_id', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.UploadItems,
      columns: [
        {name: 'cookie', type: 'string'},
        {name: 'expiresOn', type: 'number'},
        {name: 'fileContext', type: 'string'},
        {name: 'fileName', type: 'string'},
        {name: 'fileExtn', type: 'string'},
        {name: 'fileToken', type: 'string'},
        {name: 'mergeStatus', type: 'boolean'},
        {name: 'numberOfChunks', type: 'number'},
        {name: 'uploadStatus', type: 'boolean'},
        {name: 'component_id', type: 'string'},
      ],
    }),
    tableSchema({
      name: Constants.Chunks,
      columns: [
        {name: 'uploadItem_id', type: 'string', isIndexed: true},
        {name: 'chunkOffset', type: 'number'},
        {name: 'chunkNumber', type: 'number'},
        {name: 'chunkSize', type: 'number'},
        {name: 'chunkStatus', type: 'boolean'},
      ],
    }),
    tableSchema({
      name: Constants.MessageUploadItems,
      columns: [
        {name: 'itemId', type: 'string', isIndexed: true},
        {name: 'priority', type: 'number'},
        {name: 'progress', type: 'number'},
        {name: 'retryCount', type: 'number'},
        // {name: 'message', type: 'Message'},
        // {name: 'board', type: 'Board'},
      ],
    }),
    tableSchema({
      name: Constants.PostUploadItems,
      columns: [
        {name: 'itemId', type: 'string', isIndexed: true},
        {name: 'priority', type: 'number'},
        {name: 'progress', type: 'number'},
        {name: 'retryCount', type: 'number'},
        // {name: 'message', type: 'Post'},
      ],
    }),
  ],
});
